#Author: ichivite@esri.com

import sys
import arcpy, os
from arcpy import env


def main(argv=None):

     # Get Input Parameters
     env.workspace = r"D:\Tests\StatOil\StatOil.gdb"
     env.overwriteOutput = True
     lineFC = r"Pipelines_Projected"                                                        #PolylineM featureclass defining the input geometries from which events will be created. Typically roads, pipes etc
     routeIDFieldName = "NAME"
     routeMFieldName = "RouteM"                                                             #Interval separating each event. Units as expressed in the spatial reference of lineFC
     eventsFC = r"D:\Tests\StatOil\gdb in ismael.sde/GDB.DBO.events_"                       #The featureclass with events being served by ArcGIS Server. Typically in a multi-user geodatabase
     CSVFile_temp = r"D:\Tests\StatOil\Temp\test.csv"   
     outFeatureClass_temp = r"D:\Tests\StatOil\Temp\outputFC.shp"

     for interval in [50,5000,10000,50000]:
          UpdateEvents (lineFC,routeIDFieldName,routeMFieldName,interval,eventsFC + str(interval),CSVFile_temp,outFeatureClass_temp)
          #Rebuild indexes. IMPORTANT!!
          print "   Update indexes..."
          arcpy.RebuildIndexes_management(r"D:\Tests\StatOil\gdb in ismael.sde", "NO_SYSTEM","GDB.DBO.events_" +  str(interval), "ALL")
                         
def UpdateEvents(lineFC, routeIDFieldName, routeMFieldName, interval,eventsFC,CSVFile_temp,outFeatureClass_temp):

     print "Processing interval: " + str(interval)
     print "   Construct events..."                    
     #Construct string with events
     CSVStringConstruct = []
     CSVStringConstruct.append(routeIDFieldName + "," + routeMFieldName  + "\n")
     with arcpy.da.SearchCursor(lineFC, ["SHAPE@",routeIDFieldName]) as lines:
          for row in lines:
               lineShape = row[0]
               startM = lineShape.firstPoint.M
               endM = lineShape.lastPoint.M
               routeID = row[1].encode('utf-8')
               eventM = ((int(startM/interval))*interval)+interval
               while eventM < endM:
                    CSVStringConstruct.append(str(routeID))
                    CSVStringConstruct.append(',')
                    CSVStringConstruct.append(str(eventM))
                    CSVStringConstruct.append("\n")
                    eventM = eventM + interval
     CSVString = ''.join (CSVStringConstruct)

     print "   Save events to text file..." 
     #Create text file, persist events in it
     outputCSVFile = open(CSVFile_temp,'w')
     outputCSVFile.write(CSVString)
     outputCSVFile.close()

     print "   Create event layer..." 
     #Create event layer and persist as a featureclass
     arcpy.MakeRouteEventLayer_lr (lineFC, routeIDFieldName , CSVFile_temp, routeIDFieldName + " POINT " + routeMFieldName, "Ms", "#", "NO_ERROR_FIELD", "ANGLE_FIELD")     
     print "   Save event layer to featureclass..." 
     arcpy.CopyFeatures_management("Ms", outFeatureClass_temp)

     print "   Deleting events..."
     #Delete old events and push new ones
     arcpy.DeleteFeatures_management(eventsFC)
     print "   Loading events..."
     #Append new events to eventsFC
     arcpy.Append_management([outFeatureClass_temp], eventsFC, "NO_TEST","","")
     print "   Update indexes..."
     #Rebuild indexes. IMPORTANT!!
     #arcpy.RebuildIndexes_management("Database Connections/GDB@DC@server.sde", "NO_SYSTEM","db1.GDB.Roads", "ALL")
     print "   Done"

if __name__ == "__main__":
     sys.exit(main(sys.argv[1:]))
